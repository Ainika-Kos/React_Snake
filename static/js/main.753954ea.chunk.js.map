{"version":3,"sources":["components/Snake/Snake.ts","components/Cell/Cell.ts","constants/constants.ts","components/Game/Game.ts","components/Heading/Heading.tsx","components/Display/Display.tsx","components/Button/Button.tsx","assets/won.png","components/Winner/Winner.tsx","components/Play/Play.tsx","reportWebVitals.ts","index.tsx"],"names":["Direction","Cell","x","y","this","Snake","boardWidth","boardHeight","isAppleInside","direction","RIGHT","directions","gameOver","won","growTail","cells","head","length","isGameOver","shift","push","DOWN","UP","LEFT","dir","whereToMove","some","cell","result","isOnCell","WIDTH","HEIGHT","Game","food","eatenFoodCount","level","speed","snake","coordinates","i","j","Math","floor","random","removeFood","splice","Heading","text","className","Display","Button","clickHandler","type","onClick","Winner","src","alt","game","cssStyle","document","addEventListener","e","preventDefault","chooseDirection","changeDirection","keyCode","Play","useState","getCells","setCells","restart","setTimeout","move","getFood","Array","fill","map","_","__","uuidv4","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.753954ea.chunk.js","sourcesContent":["import { Cell } from '../Cell/Cell';\r\n\r\nexport enum Direction {\r\n  UP = 1,\r\n  DOWN = 2,\r\n  RIGHT = 3,\r\n  LEFT = 4,\r\n}\r\nexport class Snake {\r\n  boardWidth: number;\r\n\r\n  boardHeight: number;\r\n\r\n  isAppleInside?: (x: number, y: number) => boolean;\r\n\r\n  constructor(\r\n    boardWidth: number,\r\n    boardHeight: number,\r\n    isAppleInside?: (x: number, y: number) => boolean\r\n  ) {\r\n    this.isAppleInside = isAppleInside;\r\n    this.boardHeight = boardHeight;\r\n    this.boardWidth = boardWidth;\r\n  }\r\n\r\n  direction: Direction = Direction.RIGHT;\r\n\r\n  directions: Direction[] = [];\r\n\r\n  gameOver: boolean = false;\r\n\r\n  won: boolean = false;\r\n\r\n  growTail: number = 0;\r\n\r\n  cells: Cell[] = [\r\n    new Cell(0, 0), new Cell(1, 0), new Cell(2, 0), new Cell(3, 0)\r\n  ];\r\n\r\n  getCells() {\r\n    return [...this.cells];\r\n  }\r\n\r\n  // Groving snake and changing coordinates \r\n\r\n  whereToMove() {\r\n    const head = this.cells[this.cells.length - 1];\r\n\r\n    // Groving snake tail\r\n    if (this.isGameOver()) {\r\n      this.gameOver = true;\r\n    } else if (!this.isAppleInside || !this.isAppleInside(head.x, head.y)) {\r\n      if (this.growTail >= 1) {\r\n        this.growTail -=1;\r\n      } else {\r\n        this.cells.shift();\r\n      }\r\n    } else {\r\n      this.growTail += 2;\r\n    }\r\n\r\n    // Changing x & y coordinates, depending on direction => add step to directions array for memory\r\n\r\n    if (this.direction === Direction.RIGHT) {\r\n      if (this.gameOver === false) {\r\n        this.cells.push(new Cell(head.x + 1, head.y));\r\n      }\r\n    } else if (this.direction === Direction.DOWN) {\r\n      if (this.gameOver === false) {\r\n        this.cells.push(new Cell(head.x, head.y + 1));\r\n      }\r\n    } else if (this.direction === Direction.UP) {\r\n      if (this.gameOver === false) {\r\n        this.cells.push(new Cell(head.x, head.y - 1));\r\n      }\r\n    } else if (this.direction === Direction.LEFT) {\r\n      if (this.gameOver === false) {\r\n        this.cells.push(new Cell(head.x - 1, head.y));\r\n      }\r\n    }\r\n  }\r\n\r\n  // Making moves and remove steps from directions array\r\n\r\n  move() {\r\n    if (this.gameOver === false) {\r\n      if (this.directions.length > 0) {\r\n        const dir = this.directions[0];\r\n        this.direction = dir;\r\n        this.whereToMove();\r\n        this.directions.shift();\r\n      } else {\r\n        this.whereToMove();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Change direction, depending on key choose (Play.tsx) and don't allow make opposite move\r\n\r\n  changeDirection(direction: Direction) {\r\n    if (\r\n      (this.direction === Direction.RIGHT && direction === Direction.LEFT) ||\r\n      (this.direction === Direction.LEFT && direction === Direction.RIGHT)\r\n    ) {\r\n      const dir = this.direction;\r\n      this.direction = dir;\r\n    } else if (\r\n      (this.direction === Direction.UP && direction === Direction.DOWN) ||\r\n      (this.direction === Direction.DOWN && direction === Direction.UP)\r\n    ) {\r\n      const dir = this.direction;\r\n      this.direction = dir;\r\n    } else {\r\n      this.direction = direction;\r\n      this.directions.push(this.direction);\r\n    }\r\n  }\r\n\r\n  // Check if snake is on this cell\r\n  \r\n  isOnCell(x: number, y: number) {\r\n    return this.cells.some((cell) => cell.x === x && cell.y === y);\r\n  }\r\n\r\n  // Chek and set gameOver(result) = true, if snake bumbs itself OR is outside the board dimensions\r\n\r\n  isGameOver(): boolean {\r\n    let result: boolean = false;\r\n    if (this.direction === Direction.RIGHT) {\r\n      if (\r\n        this.isOnCell(this.cells[this.cells.length - 1].x + 1,\r\n          this.cells[this.cells.length - 1].y)\r\n      ) {\r\n        result = true;\r\n      } else if (this.cells[this.cells.length - 1].x === this.boardWidth - 1) {\r\n        result = true;\r\n      }\r\n    }\r\n    if (this.direction === Direction.DOWN) {\r\n      if (\r\n        this.isOnCell(this.cells[this.cells.length - 1].x,\r\n          this.cells[this.cells.length - 1].y + 1)\r\n      ) {\r\n        result = true;\r\n      } else if (this.cells[this.cells.length - 1].y === this.boardHeight - 1) {\r\n        result = true;\r\n      }\r\n    }\r\n    if (this.direction === Direction.UP) {\r\n      if (\r\n        this.isOnCell(this.cells[this.cells.length - 1].x,\r\n          this.cells[this.cells.length - 1].y - 1)\r\n      ) {\r\n        result = true;\r\n      } else if (this.cells[this.cells.length - 1].y === 0) {\r\n        result = true;\r\n      }\r\n    }\r\n    if (this.direction === Direction.LEFT) {\r\n      if (\r\n        this.isOnCell(this.cells[this.cells.length - 1].x - 1,\r\n          this.cells[this.cells.length - 1].y)\r\n      ) {\r\n        result = true;\r\n      } else if (this.cells[this.cells.length - 1].x === 0) {\r\n        result = true;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n}","export class Cell {\r\n  x: number;\r\n    \r\n  y: number;\r\n    \r\n  constructor(x: number, y: number) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n}\r\n","export const WIDTH: number = 40;\r\nexport const HEIGHT: number = 20;","import { Cell } from '../Cell/Cell';\r\nimport { HEIGHT, WIDTH } from '../../constants/constants';\r\n\r\nexport class Game {\r\n  food: Cell[] = [\r\n    { x: 10, y: 5 },\r\n    { x: 6, y: 7 },\r\n    { x: 12, y: 18 },\r\n    { x: 12, y: 1 },\r\n    { x: 12, y: 6 },\r\n  ];\r\n\r\n  eatenFoodCount: number = 0;\r\n\r\n  level: number = 1;\r\n\r\n  speed: number = 400;\r\n\r\n  showFood() {\r\n    return this.food;\r\n  }\r\n\r\n\r\n  // Food seeding function\r\n\r\n  getFood(snake: Cell[]) {\r\n    this.eatenFoodCount += 1; // score++\r\n\r\n    if (this.eatenFoodCount % 5 === 0) { // if snake ate 5 food elements => push new elements on coordinates\r\n      this.food.shift();\r\n      this.level += 1;\r\n      this.speed -= 25;\r\n      const coordinates = [];\r\n      for (let i = 0; i < WIDTH; i++) {\r\n        for (let j = 0; j < HEIGHT; j++) {\r\n          if (\r\n            !snake.some((cell) => cell.x === i && cell.y === j) && // doesn't allow add food on snake or on current food cell\r\n            !this.food.some((cell) => cell.x === i && cell.y === j)\r\n          ) {\r\n            coordinates.push({ x: i, y: j });\r\n          }\r\n        }\r\n      }\r\n\r\n      for (let i = 0; i < 5; i++) {\r\n        this\r\n          .food\r\n          .push(coordinates[Math.floor(Math.random() * coordinates.length)]);\r\n      }\r\n    } else {\r\n      this.removeFood(snake); \r\n    }\r\n    return this.food;\r\n  }\r\n\r\n\r\n  // Check if food is on this cell\r\n\r\n  isOnCell(x: number, y: number) {\r\n    return this.food.some((cell) => cell.x === x && cell.y === y);\r\n  }\r\n\r\n  // Remove food when it is eaten by snake\r\n\r\n  removeFood(snake: Cell[]) {\r\n    for (let i = 0; i < this.food.length; i++) {\r\n      if (snake.some((cell) => cell.x === this.food[i].x &&\r\n        cell.y === this.food[i].y)) {\r\n        this.food.splice(i, 1);\r\n      }\r\n    }\r\n    return this.food;\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './Heading.css';\r\n\r\ntype Props = {\r\n  text: string;\r\n};\r\n\r\nconst Heading = ({ text }: Props) => {\r\n  return (\r\n    <div className=\"heading\">\r\n      <h1>{text}</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Heading;\r\n","import React from 'react';\r\nimport './Display.css';\r\n\r\ntype Props = {\r\n  text: string;\r\n  gameOver: boolean;\r\n};\r\n\r\nconst Display = ({ text, gameOver }: Props) => {\r\n  return (\r\n    <div>\r\n      {!gameOver ? (\r\n        <div className=\"display\">{text}</div>\r\n      ) : (\r\n        <div className=\"display display--gamover\">{text}</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Display;\r\n","import React from 'react';\r\nimport './Button.css';\r\n\r\ntype Props = {\r\n  text: string;\r\n  clickHandler: () => void;\r\n};\r\n\r\nconst Button = ({ text, clickHandler }: Props) => {\r\n  return (\r\n    <button type=\"button\" onClick={clickHandler}>\r\n      {text}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","export default __webpack_public_path__ + \"static/media/won.dc069a05.png\";","import React from 'react';\r\nimport './Winner.css';\r\nimport won from '../../assets/won.png';\r\n\r\nconst Winner = () => {\r\n  return (\r\n    <div>\r\n      <img src={won} alt=\"\" className=\"winner\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Winner;\r\n","import React, { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport './Play.css';\nimport 'flexboxgrid';\nimport { Snake, Direction } from '../Snake/Snake';\nimport { Game } from '../Game/Game';\nimport { Cell } from '../Cell/Cell';\nimport { HEIGHT, WIDTH } from '../../constants/constants';\nimport Heading from '../Heading/Heading';\nimport Display from '../Display/Display';\nimport Button from '../Button/Button';\nimport Winner from '../Winner/Winner';\n\nconst game = new Game();\nconst width: number = WIDTH;\nconst height: number = HEIGHT;\n\nconst isAppleInside = (x: number, y: number): boolean => {\n  return game.isOnCell(x, y);\n};\n\nconst snake = new Snake(width, height, isAppleInside);\n\n// Show element function snake | food depending on the level | anything\n\nconst cssStyle = (x: number, y: number) => {\n  if (snake.isOnCell(x, y)) {\n    return 'snake';\n  }\n  if (game.isOnCell(x, y) && game.level < 2) {\n    return 'ananas';\n  }\n  if (game.isOnCell(x, y) && game.level < 3) {\n    return 'cupcake';\n  }\n  if (game.isOnCell(x, y) && game.level < 4) {\n    return 'mouse';\n  }\n  if (game.isOnCell(x, y) && game.level < 5) {\n    return 'medal';\n  }\n  if (game.isOnCell(x, y) && game.level < 6) {\n    return 'present';\n  }\n  if (game.isOnCell(x, y) && game.level < 7) {\n    return 'money';\n  }\n  if (game.isOnCell(x, y) && game.level < 8) {\n    return 'heart';\n  }\n  if (game.isOnCell(x, y) && game.level < 9) {\n    return 'beer';\n  }\n  if (game.isOnCell(x, y) && game.level < 10) {\n    return 'diamond';\n  }\n  return '';\n};\n\n// Keylistener => choose direction\ndocument.addEventListener('keyup', (e) => {\n  e.preventDefault();\n  const direction = chooseDirection(e);\n  if (direction) {\n    snake.changeDirection(direction);\n  }\n});\n\n// Set direction depending on key\nconst chooseDirection = (e: KeyboardEvent): Direction | null => {\n  switch (e.keyCode) {\n    case 38:\n      return Direction.UP;\n    case 39:\n      return Direction.RIGHT;\n    case 40:\n      return Direction.DOWN;\n    case 37:\n      return Direction.LEFT;\n  }\n  return null;\n};\n\nexport function update() {\n  if (isAppleInside(snake.cells[snake.cells.length - 1].x,\n    snake.cells[snake.cells.length - 1].y)) {\n    snake.move();\n    game.getFood(snake.cells);\n  } else {\n    snake.move();\n  }\n}\n\nconst Play = () => {\n  // eslint-disable-next-line\n  const [cells, setCells] = useState<Cell[]>(snake.getCells());\n\n  function restart() {\n    game.level = 1;\n    game.speed = 400;\n    game.food = [\n      {\n        x: Math.floor(Math.random() * WIDTH),\n        y: Math.floor(Math.random() * HEIGHT),\n      },\n      {\n        x: Math.floor(Math.random() * WIDTH),\n        y: Math.floor(Math.random() * HEIGHT),\n      },\n      {\n        x: Math.floor(Math.random() * WIDTH),\n        y: Math.floor(Math.random() * HEIGHT),\n      },\n      {\n        x: Math.floor(Math.random() * WIDTH),\n        y: Math.floor(Math.random() * HEIGHT),\n      },\n      {\n        x: Math.floor(Math.random() * WIDTH),\n        y: Math.floor(Math.random() * HEIGHT),\n      },\n    ];\n    game.eatenFoodCount = 0;\n    snake.directions = [];\n    snake.direction = Direction.RIGHT;\n    snake.gameOver = false;\n    snake.won = false;\n    snake.cells = [\n      new Cell(0, 0), new Cell(1, 0), new Cell(2, 0), new Cell(3, 0)\n    ];\n  }\n\n  setTimeout(() => {\n    update();\n    setCells(snake.getCells());\n  }, game.speed + 100); // if time === game.speed and 2 food element are near snake doesn't eat it\n\n  return (\n    <div className=\"Play\">\n      <div>\n        <Heading text=\"Welcome to the Snake game!\" />\n      </div>\n      <div>\n        {game.eatenFoodCount < 45 ? (\n          <div className=\"board-wrapper\">\n            {snake.gameOver ? (\n              <div className=\"display-wrapper\">\n                <Display gameOver={snake.gameOver} text=\"Game Over!\" />\n                <Display gameOver={snake.gameOver} text={`Level: ${game.level} / 10`} />\n                <Display gameOver={snake.gameOver} text={`Score: ${game.eatenFoodCount} / 45`} />\n                <Button text=\"Restart\" clickHandler={restart} />\n              </div>\n            ) : (\n              <div className=\"display-wrapper\">\n                <Display gameOver={snake.gameOver} text={`Level: ${game.level} / 10`} />\n                <Display gameOver={snake.gameOver} text={`Score: ${game.eatenFoodCount} / 45`} />\n                <Display gameOver={snake.gameOver} text={`Speed: ${game.level * 100}`} />\n                <Button text=\"Restart\" clickHandler={restart} />\n              </div>\n            )}\n            <div>\n              <table>\n                <tbody>\n                  {Array(height)\n                    .fill(null)\n                    .map((_, y: number) => (\n                      <tr key={uuidv4()}>\n                        {Array(width)\n                          .fill(null)\n                          .map((__, x: number) => (\n                            <td className={cssStyle(x, y)} key={uuidv4()} />\n                          ))}\n                      </tr>\n                    ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        ) : (\n          <div className=\"winner-wrapper\">\n            <Winner />\n            <Button text=\"Play one more time!\" clickHandler={restart} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Play;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/Play/Play';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}